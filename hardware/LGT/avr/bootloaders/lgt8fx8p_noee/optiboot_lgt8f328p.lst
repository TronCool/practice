
optiboot_lgt8f328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e4  00007c00  00007c00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bootv        00000004  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY
  2 .version      00000002  00007ffe  00007ffe  0000043c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006d  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000337  00000000  00000000  000004d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a6  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059e  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000344  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <main>:
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    7c00:	11 24       	eor	r1, r1
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
  SP=RAMEND;  // This is done by hardware reset
    7c02:	8f ef       	ldi	r24, 0xFF	; 255
    7c04:	98 e0       	ldi	r25, 0x08	; 8
    7c06:	9e bf       	out	0x3e, r25	; 62
    7c08:	8d bf       	out	0x3d, r24	; 61
  if(pmask == 0)
	OSCCAL = 0xae;
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7c0a:	94 b7       	in	r25, 0x34	; 52
  MCUSR = 0;
    7c0c:	14 be       	out	0x34, r1	; 52
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    7c0e:	89 2f       	mov	r24, r25
    7c10:	8d 70       	andi	r24, 0x0D	; 13
    7c12:	11 f0       	breq	.+4      	; 0x7c18 <main+0x18>
	appStart(ch);
    7c14:	89 2f       	mov	r24, r25
    7c16:	e0 d1       	rcall	.+960    	; 0x7fd8 <appStart>

  // WDT clock by 32KHz IRC
  PMCR = 0x80;
    7c18:	90 e8       	ldi	r25, 0x80	; 128
    7c1a:	90 93 f2 00 	sts	0x00F2, r25
  PMCR = 0x93;
    7c1e:	83 e9       	ldi	r24, 0x93	; 147
    7c20:	80 93 f2 00 	sts	0x00F2, r24

  // system clock: 16MHz system clock
  CLKPR = 0x80;
    7c24:	90 93 61 00 	sts	0x0061, r25
  CLKPR = 0x01;
    7c28:	81 e0       	ldi	r24, 0x01	; 1
    7c2a:	80 93 61 00 	sts	0x0061, r24

  // enable 1KB E2PROM (for LGT8F328P)
  ECCR = 0x80;
    7c2e:	96 bf       	out	0x36, r25	; 54
  ECCR = 0x4C;
    7c30:	8c e4       	ldi	r24, 0x4C	; 76
    7c32:	86 bf       	out	0x36, r24	; 54

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7c34:	85 e0       	ldi	r24, 0x05	; 5
    7c36:	80 93 81 00 	sts	0x0081, r24
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  //UART_SRA = _BV(U2X0); //Double speed mode USART0
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7c3a:	88 e1       	ldi	r24, 0x18	; 24
    7c3c:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7c40:	86 e0       	ldi	r24, 0x06	; 6
    7c42:	80 93 c2 00 	sts	0x00C2, r24
  //UART_SRL = (uint8_t)( F_CPU / (BAUD_RATE * 8L) - 1 );
  UART_SRL = (uint8_t)( F_CPU / (BAUD_RATE * 16L) - 1 );
    7c46:	80 e1       	ldi	r24, 0x10	; 16
    7c48:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_32MS);
    7c4c:	8d e0       	ldi	r24, 0x0D	; 13
    7c4e:	ae d1       	rcall	.+860    	; 0x7fac <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7c50:	25 9a       	sbi	0x04, 5	; 4
    7c52:	96 e0       	ldi	r25, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c54:	20 e3       	ldi	r18, 0x30	; 48
    7c56:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7c58:	51 e0       	ldi	r21, 0x01	; 1
    while(!(TIFR1 & _BV(TOV1)));
    LED_PORT ^= _BV(LED);
    7c5a:	40 e2       	ldi	r20, 0x20	; 32
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c5c:	30 93 85 00 	sts	0x0085, r19
    7c60:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    7c64:	56 bb       	out	0x16, r21	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7c66:	b0 9b       	sbis	0x16, 0	; 22
    7c68:	fe cf       	rjmp	.-4      	; 0x7c66 <main+0x66>
    LED_PORT ^= _BV(LED);
    7c6a:	85 b1       	in	r24, 0x05	; 5
    7c6c:	84 27       	eor	r24, r20
    7c6e:	85 b9       	out	0x05, r24	; 5
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7c70:	a8 95       	wdr
    TCNT1 = -(F_CPU/(1024*16));
    TIFR1 = _BV(TOV1);
    while(!(TIFR1 & _BV(TOV1)));
    LED_PORT ^= _BV(LED);
    watchdogReset();
  } while (--count);
    7c72:	91 50       	subi	r25, 0x01	; 1
    7c74:	99 f7       	brne	.-26     	; 0x7c5c <main+0x5c>
    7c76:	66 24       	eor	r6, r6
    7c78:	77 24       	eor	r7, r7
    7c7a:	43 01       	movw	r8, r6
    7c7c:	cc 24       	eor	r12, r12
    7c7e:	dd 24       	eor	r13, r13
	  buff[26] = buff[2];
	  buff[27] = buff[3];
	
	  // Add jump to bootloader at RESET vector
	  buff[0] = 0x0c;
	  buff[1] = 0x94; // jmp 
    7c80:	64 e9       	ldi	r22, 0x94	; 148
    7c82:	a6 2e       	mov	r10, r22
      EEARL = 0; 
      EEARH = address >> 8;
      ch = EEARH >> 2;	// 1KB page size

      if((0 == (pmask & (((uint32_t)1 << ch)))) && bval == 'F') { 
	pmask |= ((uint32_t)1 << ch);
    7c84:	51 e0       	ldi	r21, 0x01	; 1
    7c86:	25 2e       	mov	r2, r21
    7c88:	31 2c       	mov	r3, r1
    7c8a:	41 2c       	mov	r4, r1
    7c8c:	51 2c       	mov	r5, r1
  pmask = 0;

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7c8e:	7d d1       	rcall	.+762    	; 0x7f8a <getch>

    if(ch == STK_GET_PARAMETER) {
    7c90:	81 34       	cpi	r24, 0x41	; 65
    7c92:	61 f4       	brne	.+24     	; 0x7cac <main+0xac>
      unsigned char which = getch();
    7c94:	7a d1       	rcall	.+756    	; 0x7f8a <getch>
    7c96:	18 2f       	mov	r17, r24
      verifySpace();
    7c98:	8f d1       	rcall	.+798    	; 0x7fb8 <verifySpace>
      if (which == 0x82) {
    7c9a:	12 38       	cpi	r17, 0x82	; 130
    7c9c:	29 f1       	breq	.+74     	; 0x7ce8 <main+0xe8>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    7c9e:	11 38       	cpi	r17, 0x81	; 129
    7ca0:	11 f4       	brne	.+4      	; 0x7ca6 <main+0xa6>
	  putch(OPTIBOOT_MAJVER);
    7ca2:	85 e0       	ldi	r24, 0x05	; 5
    7ca4:	01 c0       	rjmp	.+2      	; 0x7ca8 <main+0xa8>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7ca6:	83 e0       	ldi	r24, 0x03	; 3
    7ca8:	68 d1       	rcall	.+720    	; 0x7f7a <putch>
    7caa:	64 c1       	rjmp	.+712    	; 0x7f74 <main+0x374>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7cac:	82 34       	cpi	r24, 0x42	; 66
    7cae:	11 f4       	brne	.+4      	; 0x7cb4 <main+0xb4>
      // SET DEVICE is ignored
      getNch(20);
    7cb0:	84 e1       	ldi	r24, 0x14	; 20
    7cb2:	03 c0       	rjmp	.+6      	; 0x7cba <main+0xba>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7cb4:	85 34       	cpi	r24, 0x45	; 69
    7cb6:	19 f4       	brne	.+6      	; 0x7cbe <main+0xbe>
      // SET DEVICE EXT is ignored
      getNch(5);
    7cb8:	85 e0       	ldi	r24, 0x05	; 5
    7cba:	86 d1       	rcall	.+780    	; 0x7fc8 <verifySpace+0x10>
    7cbc:	5b c1       	rjmp	.+694    	; 0x7f74 <main+0x374>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7cbe:	85 35       	cpi	r24, 0x55	; 85
    7cc0:	79 f4       	brne	.+30     	; 0x7ce0 <main+0xe0>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7cc2:	63 d1       	rcall	.+710    	; 0x7f8a <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7cc4:	e8 2e       	mov	r14, r24
    7cc6:	ff 24       	eor	r15, r15
    7cc8:	60 d1       	rcall	.+704    	; 0x7f8a <getch>
    7cca:	08 2f       	mov	r16, r24
    7ccc:	10 e0       	ldi	r17, 0x00	; 0
    7cce:	10 2f       	mov	r17, r16
    7cd0:	00 27       	eor	r16, r16
    7cd2:	0e 29       	or	r16, r14
    7cd4:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7cd6:	00 0f       	add	r16, r16
    7cd8:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    7cda:	6e d1       	rcall	.+732    	; 0x7fb8 <verifySpace>
    7cdc:	68 01       	movw	r12, r16
    7cde:	4a c1       	rjmp	.+660    	; 0x7f74 <main+0x374>
    }
    else if(ch == STK_UNIVERSAL) {
    7ce0:	86 35       	cpi	r24, 0x56	; 86
    7ce2:	21 f4       	brne	.+8      	; 0x7cec <main+0xec>
      // UNIVERSAL command is ignored
      getNch(4);
    7ce4:	84 e0       	ldi	r24, 0x04	; 4
    7ce6:	70 d1       	rcall	.+736    	; 0x7fc8 <verifySpace+0x10>
      putch(0x00);
    7ce8:	80 e0       	ldi	r24, 0x00	; 0
    7cea:	de cf       	rjmp	.-68     	; 0x7ca8 <main+0xa8>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7cec:	84 36       	cpi	r24, 0x64	; 100
    7cee:	09 f0       	breq	.+2      	; 0x7cf2 <main+0xf2>
    7cf0:	c5 c0       	rjmp	.+394    	; 0x7e7c <main+0x27c>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint8_t bval;
      uint16_t len;
      length = (uint16_t)getch() << 8; /* getlen() */
    7cf2:	4b d1       	rcall	.+662    	; 0x7f8a <getch>
    7cf4:	90 e0       	ldi	r25, 0x00	; 0
    7cf6:	f8 2e       	mov	r15, r24
    7cf8:	ee 24       	eor	r14, r14
      length += getch();
    7cfa:	47 d1       	rcall	.+654    	; 0x7f8a <getch>
    7cfc:	e8 0e       	add	r14, r24
    7cfe:	f1 1c       	adc	r15, r1
      bval = getch();
    7d00:	44 d1       	rcall	.+648    	; 0x7f8a <getch>
    7d02:	b8 2e       	mov	r11, r24
    7d04:	e7 01       	movw	r28, r14
    7d06:	00 e0       	ldi	r16, 0x00	; 0
    7d08:	11 e0       	ldi	r17, 0x01	; 1
      //if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);

      // While that is going on, read in page contents
      bufPtr = buff;
      len = length;
      do *bufPtr++ = getch();
    7d0a:	3f d1       	rcall	.+638    	; 0x7f8a <getch>
    7d0c:	f8 01       	movw	r30, r16
    7d0e:	81 93       	st	Z+, r24
    7d10:	8f 01       	movw	r16, r30
      while (--len);
    7d12:	21 97       	sbiw	r28, 0x01	; 1
    7d14:	d1 f7       	brne	.-12     	; 0x7d0a <main+0x10a>

      EEARL = 0; 
    7d16:	11 bc       	out	0x21, r1	; 33
      EEARH = address >> 8;
    7d18:	8d 2d       	mov	r24, r13
    7d1a:	99 27       	eor	r25, r25
    7d1c:	82 bd       	out	0x22, r24	; 34
      ch = EEARH >> 2;	// 1KB page size
    7d1e:	82 b5       	in	r24, 0x22	; 34

      if((0 == (pmask & (((uint32_t)1 << ch)))) && bval == 'F') { 
    7d20:	86 95       	lsr	r24
    7d22:	86 95       	lsr	r24
    7d24:	28 2f       	mov	r18, r24
    7d26:	d4 01       	movw	r26, r8
    7d28:	c3 01       	movw	r24, r6
    7d2a:	02 2e       	mov	r0, r18
    7d2c:	04 c0       	rjmp	.+8      	; 0x7d36 <main+0x136>
    7d2e:	b6 95       	lsr	r27
    7d30:	a7 95       	ror	r26
    7d32:	97 95       	ror	r25
    7d34:	87 95       	ror	r24
    7d36:	0a 94       	dec	r0
    7d38:	d2 f7       	brpl	.-12     	; 0x7d2e <main+0x12e>
    7d3a:	80 fd       	sbrc	r24, 0
    7d3c:	15 c0       	rjmp	.+42     	; 0x7d68 <main+0x168>
    7d3e:	f6 e4       	ldi	r31, 0x46	; 70
    7d40:	bf 16       	cp	r11, r31
    7d42:	91 f4       	brne	.+36     	; 0x7d68 <main+0x168>
	pmask |= ((uint32_t)1 << ch);
    7d44:	d2 01       	movw	r26, r4
    7d46:	c1 01       	movw	r24, r2
    7d48:	04 c0       	rjmp	.+8      	; 0x7d52 <main+0x152>
    7d4a:	88 0f       	add	r24, r24
    7d4c:	99 1f       	adc	r25, r25
    7d4e:	aa 1f       	adc	r26, r26
    7d50:	bb 1f       	adc	r27, r27
    7d52:	2a 95       	dec	r18
    7d54:	d2 f7       	brpl	.-12     	; 0x7d4a <main+0x14a>
    7d56:	68 2a       	or	r6, r24
    7d58:	79 2a       	or	r7, r25
    7d5a:	8a 2a       	or	r8, r26
    7d5c:	9b 2a       	or	r9, r27
      	// do page erase here
      	EECR = 0x94;
    7d5e:	af ba       	out	0x1f, r10	; 31
      	EECR = 0x92;
    7d60:	82 e9       	ldi	r24, 0x92	; 146
    7d62:	8f bb       	out	0x1f, r24	; 31
      	__asm__ __volatile__ ("nop" ::); 
    7d64:	00 00       	nop
	__asm__ __volatile__ ("nop" ::);      
    7d66:	00 00       	nop
      }

      // Read command terminator, start reply
      verifySpace();
    7d68:	27 d1       	rcall	.+590    	; 0x7fb8 <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      //boot_spm_busy_wait();
      if (bval == 'E') {
    7d6a:	e5 e4       	ldi	r30, 0x45	; 69
    7d6c:	be 16       	cp	r11, r30
    7d6e:	b1 f4       	brne	.+44     	; 0x7d9c <main+0x19c>
    7d70:	96 01       	movw	r18, r12
    7d72:	10 c0       	rjmp	.+32     	; 0x7d94 <main+0x194>
	  for(len = 0; len < length; len++) {
	    //if(address >= 1022)
	 	//break;
	    EEARL = address++;
    7d74:	21 bd       	out	0x21, r18	; 33
    7d76:	2f 5f       	subi	r18, 0xFF	; 255
    7d78:	3f 4f       	sbci	r19, 0xFF	; 255
	    EEARH = address >> 8;
    7d7a:	83 2f       	mov	r24, r19
    7d7c:	99 27       	eor	r25, r25
    7d7e:	82 bd       	out	0x22, r24	; 34
	    EEDR = buff[len];
    7d80:	c0 50       	subi	r28, 0x00	; 0
    7d82:	df 4f       	sbci	r29, 0xFF	; 255
    7d84:	88 81       	ld	r24, Y
    7d86:	80 bd       	out	0x20, r24	; 32
	    EECR = 0x04;
    7d88:	f4 e0       	ldi	r31, 0x04	; 4
    7d8a:	ff bb       	out	0x1f, r31	; 31
	    EECR = 0x02;
    7d8c:	82 e0       	ldi	r24, 0x02	; 2
    7d8e:	8f bb       	out	0x1f, r24	; 31

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      //boot_spm_busy_wait();
      if (bval == 'E') {
	  for(len = 0; len < length; len++) {
    7d90:	cf 5f       	subi	r28, 0xFF	; 255
    7d92:	d0 40       	sbci	r29, 0x00	; 0
    7d94:	ce 15       	cp	r28, r14
    7d96:	df 05       	cpc	r29, r15
    7d98:	68 f3       	brcs	.-38     	; 0x7d74 <main+0x174>
    7d9a:	db c0       	rjmp	.+438    	; 0x7f52 <main+0x352>
	    EECR = 0x04;
	    EECR = 0x02;
	  }
      } else {
#ifdef VIRTUAL_BOOT_PARTITION
	if ((uint16_t)(void*)address == 0) {
    7d9c:	c1 14       	cp	r12, r1
    7d9e:	d1 04       	cpc	r13, r1
    7da0:	09 f0       	breq	.+2      	; 0x7da4 <main+0x1a4>
    7da2:	4e c0       	rjmp	.+156    	; 0x7e40 <main+0x240>
	  // This is the reset vector page. We need to live-patch the code so the
	  // bootloader runs.
	  //
	  // Move RESET vector to WDT vector
	  rstVect0 = buff[0] | (buff[1] << 8);
    7da4:	60 91 00 01 	lds	r22, 0x0100
    7da8:	70 91 01 01 	lds	r23, 0x0101
    7dac:	87 2f       	mov	r24, r23
    7dae:	90 e0       	ldi	r25, 0x00	; 0
    7db0:	98 2f       	mov	r25, r24
    7db2:	88 27       	eor	r24, r24
    7db4:	26 2f       	mov	r18, r22
    7db6:	30 e0       	ldi	r19, 0x00	; 0
    7db8:	82 2b       	or	r24, r18
    7dba:	93 2b       	or	r25, r19
    7dbc:	90 93 85 01 	sts	0x0185, r25
    7dc0:	80 93 84 01 	sts	0x0184, r24
	  rstVect1 = buff[2] | (buff[3] << 8);
    7dc4:	40 91 02 01 	lds	r20, 0x0102
    7dc8:	50 91 03 01 	lds	r21, 0x0103
    7dcc:	85 2f       	mov	r24, r21
    7dce:	90 e0       	ldi	r25, 0x00	; 0
    7dd0:	98 2f       	mov	r25, r24
    7dd2:	88 27       	eor	r24, r24
    7dd4:	24 2f       	mov	r18, r20
    7dd6:	30 e0       	ldi	r19, 0x00	; 0
    7dd8:	82 2b       	or	r24, r18
    7dda:	93 2b       	or	r25, r19
    7ddc:	90 93 87 01 	sts	0x0187, r25
    7de0:	80 93 86 01 	sts	0x0186, r24
	  wdtVect0 = buff[24] | (buff[25] << 8);
    7de4:	20 91 18 01 	lds	r18, 0x0118
    7de8:	80 91 19 01 	lds	r24, 0x0119
    7dec:	90 e0       	ldi	r25, 0x00	; 0
    7dee:	98 2f       	mov	r25, r24
    7df0:	88 27       	eor	r24, r24
    7df2:	30 e0       	ldi	r19, 0x00	; 0
    7df4:	82 2b       	or	r24, r18
    7df6:	93 2b       	or	r25, r19
    7df8:	90 93 89 01 	sts	0x0189, r25
    7dfc:	80 93 88 01 	sts	0x0188, r24
	  wdtVect1 = buff[26] | (buff[27] << 8);
    7e00:	20 91 1a 01 	lds	r18, 0x011A
    7e04:	80 91 1b 01 	lds	r24, 0x011B
    7e08:	90 e0       	ldi	r25, 0x00	; 0
    7e0a:	98 2f       	mov	r25, r24
    7e0c:	88 27       	eor	r24, r24
    7e0e:	30 e0       	ldi	r19, 0x00	; 0
    7e10:	82 2b       	or	r24, r18
    7e12:	93 2b       	or	r25, r19
    7e14:	90 93 8b 01 	sts	0x018B, r25
    7e18:	80 93 8a 01 	sts	0x018A, r24

	  buff[24] = buff[0];
    7e1c:	60 93 18 01 	sts	0x0118, r22
	  buff[25] = buff[1];
    7e20:	70 93 19 01 	sts	0x0119, r23
	  buff[26] = buff[2];
    7e24:	40 93 1a 01 	sts	0x011A, r20
	  buff[27] = buff[3];
    7e28:	50 93 1b 01 	sts	0x011B, r21
	
	  // Add jump to bootloader at RESET vector
	  buff[0] = 0x0c;
    7e2c:	8c e0       	ldi	r24, 0x0C	; 12
    7e2e:	80 93 00 01 	sts	0x0100, r24
	  buff[1] = 0x94; // jmp 
    7e32:	a0 92 01 01 	sts	0x0101, r10
	  buff[2] = 0x00;
    7e36:	10 92 02 01 	sts	0x0102, r1
	  buff[3] = 0x3e; // 0x7c00 (0x3e00) 
    7e3a:	ee e3       	ldi	r30, 0x3E	; 62
    7e3c:	e0 93 03 01 	sts	0x0103, r30
    7e40:	e0 e0       	ldi	r30, 0x00	; 0
    7e42:	f1 e0       	ldi	r31, 0x01	; 1
	}
#endif
      	// Write from programming buffer
	pdword_t wPtr = (pdword_t)buff;
      	for(length = 0; length < SPM_PAGESIZE; length+=4, wPtr++) {
	      EEARL = 0; EEDR = wPtr->byte[0];
    7e44:	11 bc       	out	0x21, r1	; 33
    7e46:	80 81       	ld	r24, Z
    7e48:	80 bd       	out	0x20, r24	; 32
	      EEARL = 1; EEDR = wPtr->byte[1];
    7e4a:	81 e0       	ldi	r24, 0x01	; 1
    7e4c:	81 bd       	out	0x21, r24	; 33
    7e4e:	81 81       	ldd	r24, Z+1	; 0x01
    7e50:	80 bd       	out	0x20, r24	; 32
	      EEARL = 2; EEDR = wPtr->byte[2];
    7e52:	82 e0       	ldi	r24, 0x02	; 2
    7e54:	81 bd       	out	0x21, r24	; 33
    7e56:	82 81       	ldd	r24, Z+2	; 0x02
    7e58:	80 bd       	out	0x20, r24	; 32
	      EEARL = 3; EEDR = wPtr->byte[3];
    7e5a:	83 e0       	ldi	r24, 0x03	; 3
    7e5c:	81 bd       	out	0x21, r24	; 33
    7e5e:	83 81       	ldd	r24, Z+3	; 0x03
    7e60:	80 bd       	out	0x20, r24	; 32
    7e62:	8e 2f       	mov	r24, r30
    7e64:	8c 0d       	add	r24, r12
	      EEARL = (address + length) & 0xff;
    7e66:	81 bd       	out	0x21, r24	; 33
	      EECR = 0xA4;
    7e68:	84 ea       	ldi	r24, 0xA4	; 164
    7e6a:	8f bb       	out	0x1f, r24	; 31
	      EECR = 0xA2;
    7e6c:	82 ea       	ldi	r24, 0xA2	; 162
    7e6e:	8f bb       	out	0x1f, r24	; 31
	  buff[3] = 0x3e; // 0x7c00 (0x3e00) 
	}
#endif
      	// Write from programming buffer
	pdword_t wPtr = (pdword_t)buff;
      	for(length = 0; length < SPM_PAGESIZE; length+=4, wPtr++) {
    7e70:	34 96       	adiw	r30, 0x04	; 4
    7e72:	81 e0       	ldi	r24, 0x01	; 1
    7e74:	e0 38       	cpi	r30, 0x80	; 128
    7e76:	f8 07       	cpc	r31, r24
    7e78:	29 f7       	brne	.-54     	; 0x7e44 <main+0x244>
    7e7a:	7c c0       	rjmp	.+248    	; 0x7f74 <main+0x374>
	      EECR = 0xA2;
	}
      }
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7e7c:	84 37       	cpi	r24, 0x74	; 116
    7e7e:	09 f0       	breq	.+2      	; 0x7e82 <main+0x282>
    7e80:	6b c0       	rjmp	.+214    	; 0x7f58 <main+0x358>
      // READ PAGE - we only read flash
      uint8_t bval;

      length = getch() << 8;			/* getlen() */
    7e82:	83 d0       	rcall	.+262    	; 0x7f8a <getch>
    7e84:	90 e0       	ldi	r25, 0x00	; 0
    7e86:	f8 2e       	mov	r15, r24
    7e88:	ee 24       	eor	r14, r14
      length += getch();
    7e8a:	7f d0       	rcall	.+254    	; 0x7f8a <getch>
    7e8c:	e8 0e       	add	r14, r24
    7e8e:	f1 1c       	adc	r15, r1
      bval = getch();
    7e90:	7c d0       	rcall	.+248    	; 0x7f8a <getch>
    7e92:	18 2f       	mov	r17, r24

      verifySpace();
    7e94:	91 d0       	rcall	.+290    	; 0x7fb8 <verifySpace>

      if( bval == 'E') {
    7e96:	15 34       	cpi	r17, 0x45	; 69
    7e98:	89 f4       	brne	.+34     	; 0x7ebc <main+0x2bc>
    7e9a:	e6 01       	movw	r28, r12
    7e9c:	87 01       	movw	r16, r14
	do {
	    EEARL = address++;
    7e9e:	c1 bd       	out	0x21, r28	; 33
    7ea0:	21 96       	adiw	r28, 0x01	; 1
	    EEARH = address >> 8;
    7ea2:	8d 2f       	mov	r24, r29
    7ea4:	99 27       	eor	r25, r25
    7ea6:	82 bd       	out	0x22, r24	; 34
	    EECR = 0x01;
    7ea8:	e1 e0       	ldi	r30, 0x01	; 1
    7eaa:	ef bb       	out	0x1f, r30	; 31
	    __asm__ __volatile__ ("nop" ::);
    7eac:	00 00       	nop
	    __asm__ __volatile__ ("nop" ::);
    7eae:	00 00       	nop
	    putch(EEDR);
    7eb0:	80 b5       	in	r24, 0x20	; 32
    7eb2:	63 d0       	rcall	.+198    	; 0x7f7a <putch>
	} while (--length);
    7eb4:	01 50       	subi	r16, 0x01	; 1
    7eb6:	10 40       	sbci	r17, 0x00	; 0
    7eb8:	91 f7       	brne	.-28     	; 0x7e9e <main+0x29e>
    7eba:	4b c0       	rjmp	.+150    	; 0x7f52 <main+0x352>
    7ebc:	e6 01       	movw	r28, r12
    7ebe:	87 01       	movw	r16, r14
      } else {
      	do {
#ifdef VIRTUAL_BOOT_PARTITION
	   // Undo vector patch in bottom page so verify passes
	   if (address == 0)		ch = rstVect0 & 0xff;
    7ec0:	20 97       	sbiw	r28, 0x00	; 0
    7ec2:	29 f4       	brne	.+10     	; 0x7ece <main+0x2ce>
    7ec4:	80 91 84 01 	lds	r24, 0x0184
    7ec8:	90 91 85 01 	lds	r25, 0x0185
    7ecc:	3c c0       	rjmp	.+120    	; 0x7f46 <main+0x346>
	   else if (address == 1)	ch = rstVect0 >> 8;
    7ece:	c1 30       	cpi	r28, 0x01	; 1
    7ed0:	d1 05       	cpc	r29, r1
    7ed2:	29 f4       	brne	.+10     	; 0x7ede <main+0x2de>
    7ed4:	80 91 84 01 	lds	r24, 0x0184
    7ed8:	90 91 85 01 	lds	r25, 0x0185
    7edc:	0f c0       	rjmp	.+30     	; 0x7efc <main+0x2fc>
	   else if (address == 2)	ch = rstVect1 & 0xff;
    7ede:	c2 30       	cpi	r28, 0x02	; 2
    7ee0:	d1 05       	cpc	r29, r1
    7ee2:	29 f4       	brne	.+10     	; 0x7eee <main+0x2ee>
    7ee4:	80 91 86 01 	lds	r24, 0x0186
    7ee8:	90 91 87 01 	lds	r25, 0x0187
    7eec:	2c c0       	rjmp	.+88     	; 0x7f46 <main+0x346>
	   else if (address == 3)	ch = rstVect1 >> 8;
    7eee:	c3 30       	cpi	r28, 0x03	; 3
    7ef0:	d1 05       	cpc	r29, r1
    7ef2:	39 f4       	brne	.+14     	; 0x7f02 <main+0x302>
    7ef4:	80 91 86 01 	lds	r24, 0x0186
    7ef8:	90 91 87 01 	lds	r25, 0x0187
    7efc:	89 2f       	mov	r24, r25
    7efe:	99 27       	eor	r25, r25
    7f00:	22 c0       	rjmp	.+68     	; 0x7f46 <main+0x346>
	   else if (address == 24)	ch = wdtVect0 & 0xff;
    7f02:	c8 31       	cpi	r28, 0x18	; 24
    7f04:	d1 05       	cpc	r29, r1
    7f06:	29 f4       	brne	.+10     	; 0x7f12 <main+0x312>
    7f08:	80 91 88 01 	lds	r24, 0x0188
    7f0c:	90 91 89 01 	lds	r25, 0x0189
    7f10:	1a c0       	rjmp	.+52     	; 0x7f46 <main+0x346>
	   else if (address == 25)	ch = wdtVect0 >> 8;
    7f12:	c9 31       	cpi	r28, 0x19	; 25
    7f14:	d1 05       	cpc	r29, r1
    7f16:	29 f4       	brne	.+10     	; 0x7f22 <main+0x322>
    7f18:	80 91 88 01 	lds	r24, 0x0188
    7f1c:	90 91 89 01 	lds	r25, 0x0189
    7f20:	ed cf       	rjmp	.-38     	; 0x7efc <main+0x2fc>
	   else if (address == 26)	ch = wdtVect1 & 0xff;
    7f22:	ca 31       	cpi	r28, 0x1A	; 26
    7f24:	d1 05       	cpc	r29, r1
    7f26:	29 f4       	brne	.+10     	; 0x7f32 <main+0x332>
    7f28:	80 91 8a 01 	lds	r24, 0x018A
    7f2c:	90 91 8b 01 	lds	r25, 0x018B
    7f30:	0a c0       	rjmp	.+20     	; 0x7f46 <main+0x346>
	   else if (address == 27)	ch = wdtVect1 >> 8;
    7f32:	cb 31       	cpi	r28, 0x1B	; 27
    7f34:	d1 05       	cpc	r29, r1
    7f36:	29 f4       	brne	.+10     	; 0x7f42 <main+0x342>
    7f38:	80 91 8a 01 	lds	r24, 0x018A
    7f3c:	90 91 8b 01 	lds	r25, 0x018B
    7f40:	dd cf       	rjmp	.-70     	; 0x7efc <main+0x2fc>
	   // Since RAMPZ should already be set, we need to use EPLM directly.
	   // read a Flash and increment the address (may increment RAMPZ)
	   __asm__ ("elpm %0,Z\n" : "=r" (ch) : "z" (address));
	#else
	   // read a Flash byte and increment the address
	   __asm__ ("lpm %0,Z\n" : "=r" (ch) : "z" (address));
    7f42:	fe 01       	movw	r30, r28
    7f44:	84 91       	lpm	r24, Z+
	   //ch = *((uint8_t *)(0x4000 + address));
	#endif
#endif
	   }
	   address++;
    7f46:	21 96       	adiw	r28, 0x01	; 1
           putch(ch);
    7f48:	18 d0       	rcall	.+48     	; 0x7f7a <putch>
         } while (--length);
    7f4a:	01 50       	subi	r16, 0x01	; 1
    7f4c:	10 40       	sbci	r17, 0x00	; 0
    7f4e:	09 f0       	breq	.+2      	; 0x7f52 <main+0x352>
    7f50:	b7 cf       	rjmp	.-146    	; 0x7ec0 <main+0x2c0>
    7f52:	ce 0c       	add	r12, r14
    7f54:	df 1c       	adc	r13, r15
    7f56:	0e c0       	rjmp	.+28     	; 0x7f74 <main+0x374>
      }
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f58:	85 37       	cpi	r24, 0x75	; 117
    7f5a:	39 f4       	brne	.+14     	; 0x7f6a <main+0x36a>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f5c:	2d d0       	rcall	.+90     	; 0x7fb8 <verifySpace>
      putch(SIGNATURE_0);
    7f5e:	8e e1       	ldi	r24, 0x1E	; 30
    7f60:	0c d0       	rcall	.+24     	; 0x7f7a <putch>
      putch(SIGNATURE_1);
    7f62:	85 e9       	ldi	r24, 0x95	; 149
    7f64:	0a d0       	rcall	.+20     	; 0x7f7a <putch>
      putch(SIGNATURE_2);
    7f66:	8f e0       	ldi	r24, 0x0F	; 15
    7f68:	9f ce       	rjmp	.-706    	; 0x7ca8 <main+0xa8>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f6a:	81 35       	cpi	r24, 0x51	; 81
    7f6c:	11 f4       	brne	.+4      	; 0x7f72 <main+0x372>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f6e:	8c e0       	ldi	r24, 0x0C	; 12
    7f70:	1d d0       	rcall	.+58     	; 0x7fac <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7f72:	22 d0       	rcall	.+68     	; 0x7fb8 <verifySpace>
    }
    putch(STK_OK);
    7f74:	80 e1       	ldi	r24, 0x10	; 16
    7f76:	01 d0       	rcall	.+2      	; 0x7f7a <putch>
    7f78:	8a ce       	rjmp	.-748    	; 0x7c8e <main+0x8e>

00007f7a <putch>:
  }
}

void putch(char ch) {
    7f7a:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f7c:	80 91 c0 00 	lds	r24, 0x00C0
    7f80:	85 ff       	sbrs	r24, 5
    7f82:	fc cf       	rjmp	.-8      	; 0x7f7c <putch+0x2>
  UART_UDR = ch;
    7f84:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7f88:	08 95       	ret

00007f8a <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f8a:	80 91 c0 00 	lds	r24, 0x00C0
    7f8e:	87 ff       	sbrs	r24, 7
    7f90:	fc cf       	rjmp	.-8      	; 0x7f8a <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f92:	80 91 c0 00 	lds	r24, 0x00C0
    7f96:	84 fd       	sbrc	r24, 4
    7f98:	01 c0       	rjmp	.+2      	; 0x7f9c <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f9a:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7f9c:	80 91 c6 00 	lds	r24, 0x00C6
#ifdef LED_DATA_FLASH
  LED_PORT ^= _BV(LED);
#endif

  return ch;
}
    7fa0:	08 95       	ret

00007fa2 <uartDelay>:
#if UART_B_VALUE > 255
#error Baud rate too slow for soft UART
#endif

void uartDelay() {
  __asm__ __volatile__ (
    7fa2:	9a e2       	ldi	r25, 0x2A	; 42
    7fa4:	9a 95       	dec	r25
    7fa6:	f1 f7       	brne	.-4      	; 0x7fa4 <uartDelay+0x2>
    7fa8:	08 95       	ret
    "1:dec r25\n"
    "brne 1b\n"
    "ret\n"
    ::[count] "M" (UART_B_VALUE)
  );
}
    7faa:	08 95       	ret

00007fac <watchdogConfig>:
  );
}

void watchdogConfig(uint8_t x) {
#if 1
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fac:	e0 e6       	ldi	r30, 0x60	; 96
    7fae:	f0 e0       	ldi	r31, 0x00	; 0
    7fb0:	98 e1       	ldi	r25, 0x18	; 24
    7fb2:	90 83       	st	Z, r25
  WDTCSR = x;
    7fb4:	80 83       	st	Z, r24
#endif
}
    7fb6:	08 95       	ret

00007fb8 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fb8:	e8 df       	rcall	.-48     	; 0x7f8a <getch>
    7fba:	80 32       	cpi	r24, 0x20	; 32
    7fbc:	19 f0       	breq	.+6      	; 0x7fc4 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_32MS);    // shorten WD timeout
    7fbe:	8d e0       	ldi	r24, 0x0D	; 13
    7fc0:	f5 df       	rcall	.-22     	; 0x7fac <watchdogConfig>
    7fc2:	ff cf       	rjmp	.-2      	; 0x7fc2 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fc4:	84 e1       	ldi	r24, 0x14	; 20
}
    7fc6:	d9 cf       	rjmp	.-78     	; 0x7f7a <putch>
    "ret\n"
    ::[count] "M" (UART_B_VALUE)
  );
}

void getNch(uint8_t count) {
    7fc8:	1f 93       	push	r17

00007fca <getNch>:
    7fca:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7fcc:	de df       	rcall	.-68     	; 0x7f8a <getch>
    7fce:	11 50       	subi	r17, 0x01	; 1
    7fd0:	e9 f7       	brne	.-6      	; 0x7fcc <getNch+0x2>
  verifySpace();
    7fd2:	f2 df       	rcall	.-28     	; 0x7fb8 <verifySpace>
}
    7fd4:	1f 91       	pop	r17
    7fd6:	08 95       	ret

00007fd8 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fd8:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fda:	80 e0       	ldi	r24, 0x00	; 0
    7fdc:	e7 df       	rcall	.-50     	; 0x7fac <watchdogConfig>
  __asm__ __volatile__ (
    7fde:	ec e0       	ldi	r30, 0x0C	; 12
    7fe0:	ff 27       	eor	r31, r31
    7fe2:	09 94       	ijmp
